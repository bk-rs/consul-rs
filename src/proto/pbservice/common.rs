// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.15.8
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/pbcommon/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct RaftIndex {
    // message fields
    pub CreateIndex: u64,
    pub ModifyIndex: u64,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftIndex {
    fn default() -> &'a RaftIndex {
        <RaftIndex as ::protobuf::Message>::default_instance()
    }
}

impl RaftIndex {
    pub fn new() -> RaftIndex {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CreateIndex",
            |m: &RaftIndex| { &m.CreateIndex },
            |m: &mut RaftIndex| { &mut m.CreateIndex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ModifyIndex",
            |m: &RaftIndex| { &m.ModifyIndex },
            |m: &mut RaftIndex| { &mut m.ModifyIndex },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RaftIndex>(
            "RaftIndex",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for RaftIndex {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.CreateIndex = is.read_uint64()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ModifyIndex = is.read_uint64()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.CreateIndex != 0 {
            my_size += ::protobuf::rt::value_size(1, self.CreateIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ModifyIndex != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ModifyIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.CreateIndex != 0 {
            os.write_uint64(1, self.CreateIndex)?;
        }
        if self.ModifyIndex != 0 {
            os.write_uint64(2, self.ModifyIndex)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RaftIndex {
        RaftIndex::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static RaftIndex {
        static instance: RaftIndex = RaftIndex {
            CreateIndex: 0,
            ModifyIndex: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RaftIndex {
    fn clear(&mut self) {
        self.CreateIndex = 0;
        self.ModifyIndex = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftIndex {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct TargetDatacenter {
    // message fields
    pub Datacenter: ::std::string::String,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TargetDatacenter {
    fn default() -> &'a TargetDatacenter {
        <TargetDatacenter as ::protobuf::Message>::default_instance()
    }
}

impl TargetDatacenter {
    pub fn new() -> TargetDatacenter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Datacenter",
            |m: &TargetDatacenter| { &m.Datacenter },
            |m: &mut TargetDatacenter| { &mut m.Datacenter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TargetDatacenter>(
            "TargetDatacenter",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for TargetDatacenter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Datacenter = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Datacenter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Datacenter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Datacenter.is_empty() {
            os.write_string(1, &self.Datacenter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TargetDatacenter {
        TargetDatacenter::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static TargetDatacenter {
        static instance: TargetDatacenter = TargetDatacenter {
            Datacenter: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for TargetDatacenter {
    fn clear(&mut self) {
        self.Datacenter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TargetDatacenter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TargetDatacenter {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct WriteRequest {
    // message fields
    pub Token: ::std::string::String,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Token",
            |m: &WriteRequest| { &m.Token },
            |m: &mut WriteRequest| { &mut m.Token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteRequest>(
            "WriteRequest",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Token = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Token.is_empty() {
            os.write_string(1, &self.Token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static WriteRequest {
        static instance: WriteRequest = WriteRequest {
            Token: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.Token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct QueryOptions {
    // message fields
    pub Token: ::std::string::String,
    pub MinQueryIndex: u64,
    pub MaxQueryTime: ::protobuf::MessageField<::protobuf::well_known_types::Duration>,
    pub AllowStale: bool,
    pub RequireConsistent: bool,
    pub UseCache: bool,
    pub MaxStaleDuration: ::protobuf::MessageField<::protobuf::well_known_types::Duration>,
    pub MaxAge: ::protobuf::MessageField<::protobuf::well_known_types::Duration>,
    pub MustRevalidate: bool,
    pub StaleIfError: ::protobuf::MessageField<::protobuf::well_known_types::Duration>,
    pub Filter: ::std::string::String,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryOptions {
    fn default() -> &'a QueryOptions {
        <QueryOptions as ::protobuf::Message>::default_instance()
    }
}

impl QueryOptions {
    pub fn new() -> QueryOptions {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Token",
            |m: &QueryOptions| { &m.Token },
            |m: &mut QueryOptions| { &mut m.Token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MinQueryIndex",
            |m: &QueryOptions| { &m.MinQueryIndex },
            |m: &mut QueryOptions| { &mut m.MinQueryIndex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::Duration>(
            "MaxQueryTime",
            |m: &QueryOptions| { &m.MaxQueryTime },
            |m: &mut QueryOptions| { &mut m.MaxQueryTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AllowStale",
            |m: &QueryOptions| { &m.AllowStale },
            |m: &mut QueryOptions| { &mut m.AllowStale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RequireConsistent",
            |m: &QueryOptions| { &m.RequireConsistent },
            |m: &mut QueryOptions| { &mut m.RequireConsistent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "UseCache",
            |m: &QueryOptions| { &m.UseCache },
            |m: &mut QueryOptions| { &mut m.UseCache },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::Duration>(
            "MaxStaleDuration",
            |m: &QueryOptions| { &m.MaxStaleDuration },
            |m: &mut QueryOptions| { &mut m.MaxStaleDuration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::Duration>(
            "MaxAge",
            |m: &QueryOptions| { &m.MaxAge },
            |m: &mut QueryOptions| { &mut m.MaxAge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MustRevalidate",
            |m: &QueryOptions| { &m.MustRevalidate },
            |m: &mut QueryOptions| { &mut m.MustRevalidate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::Duration>(
            "StaleIfError",
            |m: &QueryOptions| { &m.StaleIfError },
            |m: &mut QueryOptions| { &mut m.StaleIfError },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Filter",
            |m: &QueryOptions| { &m.Filter },
            |m: &mut QueryOptions| { &mut m.Filter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryOptions>(
            "QueryOptions",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for QueryOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.MaxQueryTime {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.MaxStaleDuration {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.MaxAge {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.StaleIfError {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Token = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.MinQueryIndex = is.read_uint64()?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.MaxQueryTime)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.AllowStale = is.read_bool()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.RequireConsistent = is.read_bool()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.UseCache = is.read_bool()?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.MaxStaleDuration)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.MaxAge)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.MustRevalidate = is.read_bool()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.StaleIfError)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Filter = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Token);
        }
        if self.MinQueryIndex != 0 {
            my_size += ::protobuf::rt::value_size(2, self.MinQueryIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.MaxQueryTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.AllowStale != false {
            my_size += 2;
        }
        if self.RequireConsistent != false {
            my_size += 2;
        }
        if self.UseCache != false {
            my_size += 2;
        }
        if let Some(v) = self.MaxStaleDuration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.MaxAge.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.MustRevalidate != false {
            my_size += 2;
        }
        if let Some(v) = self.StaleIfError.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.Filter.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.Filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Token.is_empty() {
            os.write_string(1, &self.Token)?;
        }
        if self.MinQueryIndex != 0 {
            os.write_uint64(2, self.MinQueryIndex)?;
        }
        if let Some(v) = self.MaxQueryTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.AllowStale != false {
            os.write_bool(4, self.AllowStale)?;
        }
        if self.RequireConsistent != false {
            os.write_bool(5, self.RequireConsistent)?;
        }
        if self.UseCache != false {
            os.write_bool(6, self.UseCache)?;
        }
        if let Some(v) = self.MaxStaleDuration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.MaxAge.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.MustRevalidate != false {
            os.write_bool(9, self.MustRevalidate)?;
        }
        if let Some(v) = self.StaleIfError.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if !self.Filter.is_empty() {
            os.write_string(11, &self.Filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> QueryOptions {
        QueryOptions::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static QueryOptions {
        static instance: QueryOptions = QueryOptions {
            Token: ::std::string::String::new(),
            MinQueryIndex: 0,
            MaxQueryTime: ::protobuf::MessageField::none(),
            AllowStale: false,
            RequireConsistent: false,
            UseCache: false,
            MaxStaleDuration: ::protobuf::MessageField::none(),
            MaxAge: ::protobuf::MessageField::none(),
            MustRevalidate: false,
            StaleIfError: ::protobuf::MessageField::none(),
            Filter: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for QueryOptions {
    fn clear(&mut self) {
        self.Token.clear();
        self.MinQueryIndex = 0;
        self.MaxQueryTime.clear();
        self.AllowStale = false;
        self.RequireConsistent = false;
        self.UseCache = false;
        self.MaxStaleDuration.clear();
        self.MaxAge.clear();
        self.MustRevalidate = false;
        self.StaleIfError.clear();
        self.Filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryOptions {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct QueryMeta {
    // message fields
    pub Index: u64,
    pub LastContact: ::protobuf::MessageField<::protobuf::well_known_types::Duration>,
    pub KnownLeader: bool,
    pub ConsistencyLevel: ::std::string::String,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryMeta {
    fn default() -> &'a QueryMeta {
        <QueryMeta as ::protobuf::Message>::default_instance()
    }
}

impl QueryMeta {
    pub fn new() -> QueryMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Index",
            |m: &QueryMeta| { &m.Index },
            |m: &mut QueryMeta| { &mut m.Index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::Duration>(
            "LastContact",
            |m: &QueryMeta| { &m.LastContact },
            |m: &mut QueryMeta| { &mut m.LastContact },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KnownLeader",
            |m: &QueryMeta| { &m.KnownLeader },
            |m: &mut QueryMeta| { &mut m.KnownLeader },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ConsistencyLevel",
            |m: &QueryMeta| { &m.ConsistencyLevel },
            |m: &mut QueryMeta| { &mut m.ConsistencyLevel },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryMeta>(
            "QueryMeta",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for QueryMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.LastContact {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Index = is.read_uint64()?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.LastContact)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.KnownLeader = is.read_bool()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ConsistencyLevel = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.Index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.Index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.LastContact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.KnownLeader != false {
            my_size += 2;
        }
        if !self.ConsistencyLevel.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ConsistencyLevel);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.Index != 0 {
            os.write_uint64(1, self.Index)?;
        }
        if let Some(v) = self.LastContact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.KnownLeader != false {
            os.write_bool(3, self.KnownLeader)?;
        }
        if !self.ConsistencyLevel.is_empty() {
            os.write_string(4, &self.ConsistencyLevel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> QueryMeta {
        QueryMeta::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static QueryMeta {
        static instance: QueryMeta = QueryMeta {
            Index: 0,
            LastContact: ::protobuf::MessageField::none(),
            KnownLeader: false,
            ConsistencyLevel: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for QueryMeta {
    fn clear(&mut self) {
        self.Index = 0;
        self.LastContact.clear();
        self.KnownLeader = false;
        self.ConsistencyLevel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryMeta {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
pub struct EnterpriseMeta {
    // message fields
    pub Namespace: ::std::string::String,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnterpriseMeta {
    fn default() -> &'a EnterpriseMeta {
        <EnterpriseMeta as ::protobuf::Message>::default_instance()
    }
}

impl EnterpriseMeta {
    pub fn new() -> EnterpriseMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Namespace",
            |m: &EnterpriseMeta| { &m.Namespace },
            |m: &mut EnterpriseMeta| { &mut m.Namespace },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnterpriseMeta>(
            "EnterpriseMeta",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for EnterpriseMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Namespace = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Namespace.is_empty() {
            os.write_string(1, &self.Namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> EnterpriseMeta {
        EnterpriseMeta::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static EnterpriseMeta {
        static instance: EnterpriseMeta = EnterpriseMeta {
            Namespace: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for EnterpriseMeta {
    fn clear(&mut self) {
        self.Namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnterpriseMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnterpriseMeta {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/pbcommon/common.proto\x12\x06common\x1a\x1egoogle/protobuf/d\
    uration.proto\x1a\x14gogoproto/gogo.proto\"m\n\tRaftIndex\x12/\n\x0bCrea\
    teIndex\x18\x01\x20\x01(\x04R\x0bCreateIndexB\r\xf2\xde\x1f\tbexpr:\"-\"\
    \x12/\n\x0bModifyIndex\x18\x02\x20\x01(\x04R\x0bModifyIndexB\r\xf2\xde\
    \x1f\tbexpr:\"-\"\"2\n\x10TargetDatacenter\x12\x1e\n\nDatacenter\x18\x01\
    \x20\x01(\tR\nDatacenter\"*\n\x0cWriteRequest\x12\x14\n\x05Token\x18\x01\
    \x20\x01(\tR\x05Token:\x04\x88\xa0\x1f\x01\"\x9a\x04\n\x0cQueryOptions\
    \x12\x14\n\x05Token\x18\x01\x20\x01(\tR\x05Token\x12$\n\rMinQueryIndex\
    \x18\x02\x20\x01(\x04R\rMinQueryIndex\x12G\n\x0cMaxQueryTime\x18\x03\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x0cMaxQueryTimeB\x08\x98\xdf\
    \x1f\x01\xc8\xde\x1f\0\x12\x1e\n\nAllowStale\x18\x04\x20\x01(\x08R\nAllo\
    wStale\x12,\n\x11RequireConsistent\x18\x05\x20\x01(\x08R\x11RequireConsi\
    stent\x12\x1a\n\x08UseCache\x18\x06\x20\x01(\x08R\x08UseCache\x12O\n\x10\
    MaxStaleDuration\x18\x07\x20\x01(\x0b2\x19.google.protobuf.DurationR\x10\
    MaxStaleDurationB\x08\x98\xdf\x1f\x01\xc8\xde\x1f\0\x12;\n\x06MaxAge\x18\
    \x08\x20\x01(\x0b2\x19.google.protobuf.DurationR\x06MaxAgeB\x08\x98\xdf\
    \x1f\x01\xc8\xde\x1f\0\x12&\n\x0eMustRevalidate\x18\t\x20\x01(\x08R\x0eM\
    ustRevalidate\x12G\n\x0cStaleIfError\x18\n\x20\x01(\x0b2\x19.google.prot\
    obuf.DurationR\x0cStaleIfErrorB\x08\x98\xdf\x1f\x01\xc8\xde\x1f\0\x12\
    \x16\n\x06Filter\x18\x0b\x20\x01(\tR\x06Filter:\x04\x88\xa0\x1f\x01\"\
    \xbc\x01\n\tQueryMeta\x12\x14\n\x05Index\x18\x01\x20\x01(\x04R\x05Index\
    \x12E\n\x0bLastContact\x18\x02\x20\x01(\x0b2\x19.google.protobuf.Duratio\
    nR\x0bLastContactB\x08\x98\xdf\x1f\x01\xc8\xde\x1f\0\x12\x20\n\x0bKnownL\
    eader\x18\x03\x20\x01(\x08R\x0bKnownLeader\x12*\n\x10ConsistencyLevel\
    \x18\x04\x20\x01(\tR\x10ConsistencyLevel:\x04\x88\xa0\x1f\x01\".\n\x0eEn\
    terpriseMeta\x12\x1c\n\tNamespace\x18\x01\x20\x01(\tR\tNamespaceB<Z*gith\
    ub.com/hashicorp/consul/proto/pbcommon\xd0\xe3\x1e\0\xc8\xe1\x1e\0\xd8\
    \xe3\x1e\0\x90\xe3\x1e\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(::protobuf::well_known_types::file_descriptors::duration());
        deps.push(super::gogo::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(RaftIndex::generated_message_descriptor_data());
        messages.push(TargetDatacenter::generated_message_descriptor_data());
        messages.push(WriteRequest::generated_message_descriptor_data());
        messages.push(QueryOptions::generated_message_descriptor_data());
        messages.push(QueryMeta::generated_message_descriptor_data());
        messages.push(EnterpriseMeta::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
